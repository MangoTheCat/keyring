// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// R_AddPassword
SEXP R_AddPassword(const std::string& service, const std::string& account, const std::string& password);
RcppExport SEXP keyring_R_AddPassword(SEXP serviceSEXP, SEXP accountSEXP, SEXP passwordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type service(serviceSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type account(accountSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type password(passwordSEXP);
    rcpp_result_gen = Rcpp::wrap(R_AddPassword(service, account, password));
    return rcpp_result_gen;
END_RCPP
}
// R_GetPassword
SEXP R_GetPassword(const std::string& service, const std::string& account);
RcppExport SEXP keyring_R_GetPassword(SEXP serviceSEXP, SEXP accountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type service(serviceSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type account(accountSEXP);
    rcpp_result_gen = Rcpp::wrap(R_GetPassword(service, account));
    return rcpp_result_gen;
END_RCPP
}
// R_DeletePassword
SEXP R_DeletePassword(const std::string& service, const std::string& account);
RcppExport SEXP keyring_R_DeletePassword(SEXP serviceSEXP, SEXP accountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type service(serviceSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type account(accountSEXP);
    rcpp_result_gen = Rcpp::wrap(R_DeletePassword(service, account));
    return rcpp_result_gen;
END_RCPP
}
// R_FindPassword
SEXP R_FindPassword(const std::string& service);
RcppExport SEXP keyring_R_FindPassword(SEXP serviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type service(serviceSEXP);
    rcpp_result_gen = Rcpp::wrap(R_FindPassword(service));
    return rcpp_result_gen;
END_RCPP
}
// R_AddInternetPassword
SEXP R_AddInternetPassword(const std::string& servername, const std::string& account, int port, const std::string& password);
RcppExport SEXP keyring_R_AddInternetPassword(SEXP servernameSEXP, SEXP accountSEXP, SEXP portSEXP, SEXP passwordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type servername(servernameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type account(accountSEXP);
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type password(passwordSEXP);
    rcpp_result_gen = Rcpp::wrap(R_AddInternetPassword(servername, account, port, password));
    return rcpp_result_gen;
END_RCPP
}
// R_GetInternetPassword
SEXP R_GetInternetPassword(const std::string& servername, const std::string& account, int port);
RcppExport SEXP keyring_R_GetInternetPassword(SEXP servernameSEXP, SEXP accountSEXP, SEXP portSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type servername(servernameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type account(accountSEXP);
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    rcpp_result_gen = Rcpp::wrap(R_GetInternetPassword(servername, account, port));
    return rcpp_result_gen;
END_RCPP
}
// R_DeleteInternetPassword
SEXP R_DeleteInternetPassword(const std::string& servername, const std::string& account, int port);
RcppExport SEXP keyring_R_DeleteInternetPassword(SEXP servernameSEXP, SEXP accountSEXP, SEXP portSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type servername(servernameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type account(accountSEXP);
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    rcpp_result_gen = Rcpp::wrap(R_DeleteInternetPassword(servername, account, port));
    return rcpp_result_gen;
END_RCPP
}
// R_FindInternetPassword
SEXP R_FindInternetPassword(const std::string& servername, int port);
RcppExport SEXP keyring_R_FindInternetPassword(SEXP servernameSEXP, SEXP portSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type servername(servernameSEXP);
    Rcpp::traits::input_parameter< int >::type port(portSEXP);
    rcpp_result_gen = Rcpp::wrap(R_FindInternetPassword(servername, port));
    return rcpp_result_gen;
END_RCPP
}
